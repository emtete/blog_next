export const abc = `## 느낀점

<b>*완벽한 에디터는 없다*</b>는걸 느꼈습니다. 어떤 에디터이건 만족스러운 부분이 있으면 아쉬운 부분도 꼭 있었던 것 같습니다. 다 좋은데 마크다운을 지원하지 않거나, 적용되어 있는 CSS가 마음에 들지 않는 경우 등 입니다. 그래서 에디터의 기초가 되는 부분만 받아서(draft js, CodeMirror) 직접 구현하거나, 아쉬운대로 쓸 수도 있고, CSS의 일부만 수정 할 수도 있습니다.
<br>
## 사용 환경

React, Next.js
<br>
## 알아본 에디터의 종류

(더 많지만 직접 받아서 적용하고 사용까지 한 에디터만 소개하겠습니다.)
draft.js
tui editor
<br>
## 서버사이드 랜더링과 에디터

대부분의 에디터는 <b>*window객체*</b>를 사용합니다.
그래서 서버에서 실행할 경우, window객체가 없기 때문에 에러가 납니다. 그래서 보통 Next js에서 제공하는 dynamic 함수를 사용하여 적용합니다.
<br>
## 각 에디터의 특징

> 1. draft js

draft js에서 제공하는 에디터는, <b>*에터디의 가장 기초가 되는 기능들만 제공*</b>합니다. 그래서 직접 구현하거나, 다른사람들이 draft 를 사용해서 <i>**만들어놓은 라이브러리**</i>를 받아서 사용하는 방식이 있습니다. 종류도 많고 좋지만.. 완성도가 높진 않습니다. 플러그인을 받아서 사용할 수 도 있고, 완성된 형태로 올라와 있는 것도 있습니다. 저는 <b>*react-draft-wysiwyg*</b> 를 받아서 적용하고 사용하려고 했지만, 에디터에서 작성한 글을 DB에 저장하기 위해 변환하게 되는데, 그 <b>*변환된 내용이 너무 지저분*</b>했습니다. 그래서 <b>*마크다운으로 사용하려고 했지만 지원하지 않아서*</b> 적용했던 내용을 다 날리고 tui editor를 적용했습니다.

사람들이 만들어 놓은 라이브러리를 정리해서 소개해주는 사이트 입니다. [https://awesomeopensource.com/project/nikgraf/awesome-draft-js](https://awesomeopensource.com/project/nikgraf/awesome-draft-js)
<br>
> 2\. tui editor

많은 기능이 지원됩니다. 엑셀을 복사해서 붙여넣을 수도 있고, 차트도 구현되어 있고, 코드블럭도 구현되어 있습니다. 직접 구현하지 않아도 되면서 <b>*가장 만족스러운 에디터*</b>입니다. 필요한 내용은 플러그인을 받아서 적용하는 방식으로 되어있고, 자바스크립트로 구현되어 있습니다. 자바스크립트로 구현되어 있는 내용을 React, Vue로 사용할 수 있도록 만들어진 인터페이스(?)를 제공합니다. Next js를 사용하면서 에디터를 적용하는게 까다롭고 잘 안되는 에디터들도 많은데, 이 에디터는 <b>*다른것들에 비해서 좀 더 깔끔하게 적용*</b> 됬습니다. 하지만 Next js 의dynamic 함수로 import를 하는 것 이외에 하나를 더 신경 써야 하는데요. 이 에디터는 작성된 글의 내용을 instance를 통해서 불러옵니다. 그런데 instance를 불러올 때, forwardRef를 사용해야 합니다.

자세한 해결방법이 나온 사이트입니다.
[https://myeongjae.kim/blog/2020/04/05/tui-editor-with-nextjs](https://myeongjae.kim/blog/2020/04/05/tui-editor-with-nextjs)

<br>
## 시행착오

처음 에디터를 적용할 때, <b>*window객체가 없다는 애러*</b>에 당황했습니다. 검색하고 여러 에디터들을 받아서 적용하는 과정에서 적응이 됬지만, React를 위해 나온 에디터들도 Next에서 제대로 적용이 안되는 경우도 있었습니다.(물론 제가 부족해서 적용이 안된것일 수도 있습니다.)

에디터로 작성한 결과를 <b>*DB에 저장하기 위해 결과를 변환할 때, 그 내용이 깔끔하게 변환되는지*</b>도 생각해봐야 했습니다. 그래서 마크다운 에디터를 사용하는게 가장 좋을것 같다고 생각했습니다.

<b>*코드블럭을 지원*</b>하는지 확인하고 적용했어야 했는데, 처음엔 그냥 다 지원할 것이라고 생각했습니다. 그런데 아니었습니다.`;
